[tool:pytest]
# Test discovery
testpaths = tests
python_files = test_*.py *_test.py
python_classes = Test*
python_functions = test_*

# Test execution options
addopts = 
    --strict-markers
    --strict-config
    --verbose
    --tb=short
    --cov=app
    --cov-report=html:htmlcov
    --cov-report=xml:coverage.xml
    --cov-report=term-missing:skip-covered
    --cov-fail-under=80
    --cov-branch
    --junitxml=junit.xml
    --disable-warnings

# Minimum code coverage threshold
# Fail tests if coverage is below 80%
# This ensures high code quality

# Test markers
markers =
    unit: Unit tests
    integration: Integration tests
    e2e: End-to-end tests
    slow: Slow running tests
    fast: Fast running tests
    security: Security-focused tests
    performance: Performance tests
    smoke: Smoke tests for basic functionality
    regression: Regression tests
    api: API endpoint tests
    simulation: Simulation engine tests
    auth: Authentication tests
    portfolio: Portfolio management tests
    scenarios: Scenario management tests
    db: Database-related tests
    redis: Redis-related tests
    celery: Celery task tests
    websocket: WebSocket tests

# Test configuration
minversion = 7.0
required_plugins = 
    pytest-cov
    pytest-xdist
    pytest-mock
    pytest-flask
    pytest-benchmark

# Logging configuration
log_cli = true
log_cli_level = INFO
log_cli_format = %(asctime)s [%(levelname)8s] %(name)s: %(message)s
log_cli_date_format = %Y-%m-%d %H:%M:%S

# Filter warnings
filterwarnings =
    ignore::UserWarning
    ignore::DeprecationWarning
    ignore::PendingDeprecationWarning
    error::RuntimeWarning

# Test environment variables
env =
    FLASK_ENV = testing
    DATABASE_URL = sqlite:///:memory:
    REDIS_URL = redis://localhost:6379/1
    SECRET_KEY = test-secret-key
    JWT_SECRET_KEY = test-jwt-secret
    TESTING = 1 